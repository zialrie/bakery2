// src/index.ts
import React, { useEffect, useRef, useCallback } from "react";
var useLayoutEffect = typeof document !== "undefined" ? React.useLayoutEffect : () => {
};
function useEffectEvent(fn) {
  const ref = useRef(null);
  useLayoutEffect(() => {
    ref.current = fn;
  }, [fn]);
  return useCallback((...args) => {
    const f = ref.current;
    return f == null ? void 0 : f(...args);
  }, []);
}
function useFormReset(ref, initialValue, onReset) {
  let resetValue = useRef(initialValue);
  let handleReset = useEffectEvent(() => {
    if (onReset) {
      onReset(resetValue.current);
    }
  });
  useEffect(() => {
    var _a;
    let form = (_a = ref == null ? void 0 : ref.current) == null ? void 0 : _a.form;
    form == null ? void 0 : form.addEventListener("reset", handleReset);
    return () => {
      form == null ? void 0 : form.removeEventListener("reset", handleReset);
    };
  }, [ref, handleReset]);
}
export {
  useEffectEvent,
  useFormReset,
  useLayoutEffect
};
