// src/index.ts
import { useEffect } from "react";
function useResize(callback, immediatelyInvoke = true) {
  useEffect(() => {
    const fn = () => callback();
    if (immediatelyInvoke) {
      fn();
    }
    window.addEventListener("resize", fn);
    return () => window.removeEventListener("resize", fn);
  }, []);
}
function hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function useResizeObserver(options) {
  const { ref, box, onResize } = options;
  useEffect(() => {
    let element = ref == null ? void 0 : ref.current;
    if (!element) {
      return;
    }
    if (!hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver((entries) => {
        if (!entries.length) {
          return;
        }
        onResize();
      });
      resizeObserverInstance.observe(element, { box });
      return () => {
        if (element) {
          resizeObserverInstance.unobserve(element);
        }
      };
    }
  }, [onResize, ref, box]);
}
export {
  useResize,
  useResizeObserver
};
