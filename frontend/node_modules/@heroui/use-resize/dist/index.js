"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  useResize: () => useResize,
  useResizeObserver: () => useResizeObserver
});
module.exports = __toCommonJS(index_exports);
var import_react = require("react");
function useResize(callback, immediatelyInvoke = true) {
  (0, import_react.useEffect)(() => {
    const fn = () => callback();
    if (immediatelyInvoke) {
      fn();
    }
    window.addEventListener("resize", fn);
    return () => window.removeEventListener("resize", fn);
  }, []);
}
function hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function useResizeObserver(options) {
  const { ref, box, onResize } = options;
  (0, import_react.useEffect)(() => {
    let element = ref == null ? void 0 : ref.current;
    if (!element) {
      return;
    }
    if (!hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver((entries) => {
        if (!entries.length) {
          return;
        }
        onResize();
      });
      resizeObserverInstance.observe(element, { box });
      return () => {
        if (element) {
          resizeObserverInstance.unobserve(element);
        }
      };
    }
  }, [onResize, ref, box]);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useResize,
  useResizeObserver
});
