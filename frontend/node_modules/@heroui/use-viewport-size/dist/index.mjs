// src/index.ts
import React, { useContext, useEffect, useState } from "react";
var visualViewport = typeof document !== "undefined" && window.visualViewport;
var IsSSRContext = React.createContext(false);
function getSnapshot() {
  return false;
}
function getServerSnapshot() {
  return true;
}
function subscribe(onStoreChange) {
  return () => {
  };
}
function useIsSSR() {
  if (typeof React["useSyncExternalStore"] === "function") {
    return React["useSyncExternalStore"](subscribe, getSnapshot, getServerSnapshot);
  }
  return useContext(IsSSRContext);
}
function useViewportSize() {
  let isSSR = useIsSSR();
  let [size, setSize] = useState(() => isSSR ? { width: 0, height: 0 } : getViewportSize());
  useEffect(() => {
    let onResize = () => {
      setSize((size2) => {
        let newSize = getViewportSize();
        if (newSize.width === size2.width && newSize.height === size2.height) {
          return size2;
        }
        return newSize;
      });
    };
    if (!visualViewport) {
      window.addEventListener("resize", onResize);
    } else {
      visualViewport.addEventListener("resize", onResize);
    }
    return () => {
      if (!visualViewport) {
        window.removeEventListener("resize", onResize);
      } else {
        visualViewport.removeEventListener("resize", onResize);
      }
    };
  }, []);
  return size;
}
function getViewportSize() {
  return {
    width: visualViewport && (visualViewport == null ? void 0 : visualViewport.width) || window.innerWidth,
    height: visualViewport && (visualViewport == null ? void 0 : visualViewport.height) || window.innerHeight
  };
}
export {
  useIsSSR,
  useViewportSize
};
