"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  useIsSSR: () => useIsSSR,
  useViewportSize: () => useViewportSize
});
module.exports = __toCommonJS(index_exports);
var import_react = __toESM(require("react"));
var visualViewport = typeof document !== "undefined" && window.visualViewport;
var IsSSRContext = import_react.default.createContext(false);
function getSnapshot() {
  return false;
}
function getServerSnapshot() {
  return true;
}
function subscribe(onStoreChange) {
  return () => {
  };
}
function useIsSSR() {
  if (typeof import_react.default["useSyncExternalStore"] === "function") {
    return import_react.default["useSyncExternalStore"](subscribe, getSnapshot, getServerSnapshot);
  }
  return (0, import_react.useContext)(IsSSRContext);
}
function useViewportSize() {
  let isSSR = useIsSSR();
  let [size, setSize] = (0, import_react.useState)(() => isSSR ? { width: 0, height: 0 } : getViewportSize());
  (0, import_react.useEffect)(() => {
    let onResize = () => {
      setSize((size2) => {
        let newSize = getViewportSize();
        if (newSize.width === size2.width && newSize.height === size2.height) {
          return size2;
        }
        return newSize;
      });
    };
    if (!visualViewport) {
      window.addEventListener("resize", onResize);
    } else {
      visualViewport.addEventListener("resize", onResize);
    }
    return () => {
      if (!visualViewport) {
        window.removeEventListener("resize", onResize);
      } else {
        visualViewport.removeEventListener("resize", onResize);
      }
    };
  }, []);
  return size;
}
function getViewportSize() {
  return {
    width: visualViewport && (visualViewport == null ? void 0 : visualViewport.width) || window.innerWidth,
    height: visualViewport && (visualViewport == null ? void 0 : visualViewport.height) || window.innerHeight
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useIsSSR,
  useViewportSize
});
